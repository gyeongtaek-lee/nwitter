{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","data","console","log","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","src","width","height","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorId","collection","add","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d50e8a27.chunk.js","sourcesContent":["// firebase/app에 포함된 모든 모듈을 firebase 객체에 부여\r\n// import firebase from \"firebase/app\";\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGEING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n  };\r\n\r\n// firebase 설정 정보를 초기화 함수에 전달. firebase.intializeApp(firebaseConfig)는 다른 파일에서 참조할 필요가 없으니까 fbase.js 파일 안에서 실행하도록 코드를 수정했어.\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// firebase.auth()는 다른 파일에서 참조할 것이므로 authService에 담아 내보낸다.\r\nexport const firebaseInstance = firebase;\r\n// authentication\r\nexport const authService = firebase.auth();\r\n// database\r\nexport const dbService = firebase.firestore();\r\n// storage\r\nexport const storageService = firebase.storage();","import { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\n\r\nconst AuthForm = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n\r\n        const {\r\n          target: { name, value },\r\n        } = event;\r\n\r\n        if (name === \"email\") {\r\n          setEmail(value);\r\n        } \r\n        else if (name === \"password\") {\r\n          setPassword(value);\r\n        }\r\n        \r\n      };\r\n\r\n    const onSubmit = async (event) => {    \r\n\r\n        event.preventDefault();\r\n\r\n        try {\r\n\r\n            let data;\r\n\r\n            if (newAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }\r\n            else {\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n\r\n        }\r\n        catch (error) {\r\n            // console.log(error);\r\n            setError(error.message);\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    required\r\n                    value={email}\r\n                    onChange={onChange}\r\n                />\r\n                <input \r\n                    name=\"password\" \r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password} \r\n                    onChange={onChange} \r\n                />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />        \r\n                {error}        \r\n            </form>\r\n            <span onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</span>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (event) => {\r\n\r\n        const {\r\n            target : { name }\r\n        } = event;\r\n\r\n        let provider;\r\n\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }\r\n        else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AuthForm />\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;","import { dbService, storageService } from \"fbase\";\r\nimport { useState } from \"react\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n\r\n        const ok = window.confirm(\"삭제하시겠습니까?\");\r\n\r\n        if (ok) {\r\n\r\n            // 삭제할 문서의 경로를 인자로 넣어준다.\r\n            const data = await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n\r\n            if (nweetObj.attachmentUrl !== \"\") {\r\n                await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n\r\n                console.log(nweetObj.attachmentUrl);\r\n            }                \r\n\r\n        }\r\n\r\n    };\r\n\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n\r\n        const {\r\n            target : { value }\r\n        } = event;\r\n\r\n        setNewNweet(value);\r\n\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        // 파이어베이스에 update (수정할 문서의 경로를 인자로 넣어준다.)\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({ text : newNweet });\r\n\r\n        // editing state 초기화\r\n        setEditing(false);\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                editing ? \r\n                (<>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input onChange={onChange} value={newNweet} required />                        \r\n                        <input type=\"submit\" value=\"Update Nweet\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>) \r\n                : \r\n                (<>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentUrl && (\r\n                        <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n                    )}\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>Delete Nweet</button>\r\n                            <button onClick={toggleEditing}>Edit Nweet</button>\r\n                        </>\r\n                    )}\r\n                </>)\r\n            }                        \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Nweet;","import { storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useState } from \"react\";\r\nimport { dbService } from \"fbase\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (event) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        let attachmentUrl = \"\";\r\n\r\n        if (attachment !== \"\") {\r\n\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n    \r\n            // response.ref 는 스토리지 레퍼런스(storageService.ref())가 아닌 스냅샷 레퍼런스야!\r\n            // getDownloadURL 함수는 파일을 다운로드할 수 있는 스토리지 URL을 반환해.\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n\r\n        } \r\n\r\n        // useState의 nweet 값을 문서에 저장.\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createAt: Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl,\r\n        };\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n\r\n        // 데이터 DB 입력 후 useState 값을 빈 문자열로 초기화\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n\r\n    };\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n\r\n        const {\r\n            target : { value },\r\n        } = event;\r\n\r\n        setNweet(value);\r\n\r\n    };\r\n\r\n    const onFileChange = (event) => {\r\n        \r\n        const {target : {files},} = event;\r\n\r\n        const theFile = files[0];\r\n\r\n        const reader = new FileReader();\r\n\r\n        // onloadend의 경우 readAsDataURL 함수에 전달할 인자가 들어간 이후 해당 결과값이 나온 다음 상황에 호출 되는데, 그때 생긴 이벤트 값을 리턴해줘.\r\n        // 해당 이벤트 값에는 우리가 원하는 해당 파일의 브라우저 URL 정보가 있고 말이야.\r\n        reader.onloadend = (finishedEvent) => {\r\n            \r\n            // 구조 분해 할당. finishedEvent.currentTarget.result에 URL 존재\r\n            const { currentTarget : { result }, } = finishedEvent;\r\n\r\n            setAttachment(result);\r\n\r\n        }\r\n        // 파일 위치를 URL로 반환.        \r\n        reader.readAsDataURL(theFile);\r\n\r\n    };\r\n\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                value={nweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n                />\r\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n                <input type=\"submit\" value=\"Nweet\" />\r\n                {attachment && (\r\n                    <div>\r\n                        <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                        <button onClick={onClearAttachment}>Clear</button>\r\n                    </div>                \r\n                )}\r\n            </form>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default NweetFactory;","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n\r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    // const getNweets = async () => {\r\n\r\n    //     const dbNweets = await dbService.collection(\"nweets\").get();        \r\n        \r\n    //     dbNweets.forEach((document) => {\r\n\r\n    //         const nweetObject = {...document.data(), id : document.id};            \r\n\r\n    //         setNweets((prev) => [nweetObject, ...prev]);\r\n    //     });\r\n\r\n    // };\r\n\r\n    // 컴포넌트가 모두 마운트 된 이후에 문서 가져오기. 실시간 데이터베이스 도입 onSnapShot()\r\n    useEffect(() => {\r\n        // getNweets();\r\n\r\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n\r\n            const newArray = snapshot.docs.map((document) => ({id : document.id, ...document.data(),}));\r\n\r\n            setNweets(newArray);\r\n\r\n        });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <NweetFactory userObj={userObj} />\r\n            <div>\r\n                {\r\n                    nweets.map((nweet) => (                        \r\n                        <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid} />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Home;","import Nweet from \"components/Nweet\";\r\nimport { authService, dbService } from \"fbase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n\r\n    // const [myNweets, setMyNweets] = useState([]);\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n    const history = useHistory();\r\n\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    // const getMyNweets = async () => {\r\n    //     // where() 함수의 인자는 필드, 조건, 찾으려는 값\r\n    //     const nweets = await dbService.collection(\"nweets\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createAt\", \"asc\").get();\r\n\r\n    //     const newArray = nweets.docs.map((doc) => ({id : doc.id, ...doc.data(),}));\r\n\r\n    //     setMyNweets(newArray);\r\n\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     getMyNweets();\r\n    // }, []);\r\n\r\n    const onChange = (event) => {\r\n\r\n        const {\r\n            target : { value }\r\n        } = event;\r\n\r\n        setNewDisplayName(value);\r\n\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({ displayName: newDisplayName })\r\n            refreshUser();\r\n        }        \r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* <div>\r\n                {\r\n                    myNweets.map((nweet) => (                        \r\n                        <Nweet key={nweet.id} nweetObj={nweet} isOwner={false} />\r\n                    ))\r\n                }\r\n            </div> */}\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" onChange={onChange} placeholder=\"Display name\" value={newDisplayName} />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Profile;","import { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n\r\n    console.log(isLoggedIn);\r\n    \r\n    return (\r\n        <Router>            \r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Switch>     \r\n                {\r\n                    isLoggedIn ? (\r\n                        <>\r\n                            <Route exact path=\"/\"><Home userObj={userObj} /></Route>\r\n                            <Route exact path=\"/profile\"><Profile refreshUser={refreshUser} userObj={userObj} /></Route>\r\n                        </>\r\n                    ) : (\r\n                        <Route exact path=\"/\"><Auth /></Route>\r\n                    )\r\n                }                 \r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n\n      console.log(user);\n      \n      if (user) {\n\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n\n      }\n      else {\n\n        setUserObj(false);\n        \n      }\n\n      setInit(true);\n\n    });\n  }, []);\n\n  const refreshUser = () => {\n\n    const user = authService.currentUser;\n\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n  };\n\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj} /> : \"initlailzing...\"}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}